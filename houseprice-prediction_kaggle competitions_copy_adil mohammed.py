# -*- coding: utf-8 -*-
"""HousePrice_Prediction_kaggle competitions_copy_ADIL MOHAMMED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RHp_unRKPC1K-I91u4oUx5JYHXvF09aJ

## #Seaborn #Data Visualization #sklearn #Data Cleaning #Linear Regression

### Copy kaggle competition_House Prices - Advanced Regression Techniques_ADIL MOHAMMED
https://www.kaggle.com/code/adilmohammed/house-price-prediction
"""

# import libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# reading the dataset
df = pd.read_csv('train.csv')
df

df.columns

df.describe()

# Remove column ID
df.drop('Id', axis=1, inplace=True)

df.head()

"""### Data Handling"""

# renaming columns
df.rename(columns={'BedroomAbvGr':'Bedroom', 'KitchenAbvGr':'Kitchen'}, inplace=True)

# show columns bedroom and kitchen
df[['Bedroom', 'Kitchen']].head()

df['Bedroom'].value_counts()

"""### Data Cleaning"""

# Columns which contains missing values
# without columns which contains missing values are 0
df.isnull().sum()[df.isnull().sum() > 0]

# droping miscfeature, alley, poolqc, fence
df.drop(['MiscFeature', 'Alley', 'PoolQC', 'Fence'], axis=1, inplace=True)

df['Fireplaces'].value_counts()

df.drop(['FireplaceQu'], axis=1, inplace=True)

df['LotFrontage'].value_counts()

df.drop(['LotFrontage'], axis=1, inplace=True)

df.isnull().sum()[df.isnull().sum() > 0]

# filling missing values
df['Electrical'].fillna(df['Electrical'].mode()[0], inplace=True)

df['Electrical'].isnull().sum()

df['MasVnrType'].value_counts()

df['MasVnrType'].fillna(df['MasVnrType'].mode()[0], inplace=True)

df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0], inplace=True)

df.isnull().sum()[df.isnull().sum() > 0]

"""### Data Visualization"""

# correlation between saleprice and other columns
# Correlation: In statistics it normally refers to the degree to which a pair of variables are linearly related.
df.corr()['SalePrice'].sort_values(ascending=False)

# correlation between saleprice and bedroom
df[['Bedroom', 'SalePrice']].corr()

# regplot to check if bedroom is negatively or positively proportional to saleprice
sns.regplot(x = 'Bedroom', y = 'SalePrice', data = df)

sns.regplot(x = 'Kitchen', y = 'SalePrice', data = df)

# row values of column kitchen which has value 0
df[df['Kitchen'] == 0]

sns.regplot(x = 'OverallQual', y = 'SalePrice', data = df)

sns.regplot(x = 'GarageCars', y = 'SalePrice', data = df)

"""### Model Development

Multi Linear Regression
"""

lm = LinearRegression()    # LinearRegression 모델 생성
features = ['OverallQual', 'GarageCars', 'GarageArea', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd']
lm.fit(df[features], df['SalePrice'])    # fit(): 선형 회귀 모델에 필요한 기울기(line_fitter.coef_)와 절편(line_fitter.intercept_) 변수 전달

lm.score(df[features], df['SalePrice'])

# pipeline
Input = [('scale', StandardScaler()), ('polynomial', PolynomialFeatures(include_bias=False)), ('model', LinearRegression())]
pipe = Pipeline(Input)
pipe.fit(df[features], df['SalePrice'])

pipe.score(df[features], df['SalePrice'])

"""Model Evaluation and Refinement"""

test_df = pd.read_csv('test.csv')
test_df.head()

# null of of features columns in test dataset
test_df[features].isnull().sum()[test_df[features].isnull().sum() > 0]

test_df['GarageArea'].fillna(test_df['GarageArea'].mean(), inplace=True)

test_df['GarageCars'].fillna(test_df['GarageCars'].mean(), inplace=True)

test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mean(), inplace=True)

# predicting the saleprice
yhat = pipe.predict(test_df[features])
yhat[0:5]

# saving the predicted values in csv file
'''submission = pd.DataFrame({'Id':test_df['Id'], 'SalePrice':yhat})
submission.to_csv('submission.csv', index=False)'''

"""### KNN Regressor"""

from sklearn.neighbors import KNeighborsRegressor
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(df[features], df['SalePrice'])
knn.score(df[features], df['SalePrice'])

predictions = knn.predict(test_df[features])

'''submission = pd.DataFrame({'Id':test_df['Id'], 'SalePrice':predictions})
submission.to_csv('submission.csv', index=False)'''

"""### Polynomial Regression"""

# polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=2)
train_input_poly = poly.fit_transform(df[features])
poly.fit(train_input_poly, df['SalePrice'])
lm.fit(train_input_poly, df['SalePrice'])
predictions = lm.predict(poly.fit_transform(test_df[features]))

"""### Ridge Model"""

from sklearn.linear_model import Ridge
RidgeModel = Ridge(alpha=0.1)
RidgeModel.fit(train_input_poly, df['SalePrice'])
predictions = RidgeModel.predict(poly.fit_transform(test_df[features]))

submission = pd.DataFrame({'Id':test_df['Id'], 'SalePrice':predictions})
submission.to_csv('submission.csv', index=False)

